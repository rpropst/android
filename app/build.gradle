import io.sentry.android.gradle.instrumentation.logcat.LogcatLevel

buildscript {
    ext.kotlin_version= '1.8.20'
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath('com.dicedmelon.gradle:jacoco-android:0.1.5')
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id "io.sentry.android.gradle" version "4.4.0"
    id 'com.android.application'
    id 'jacoco'
}

apply plugin: 'com.android.application'
apply plugin: 'com.ydq.android.gradle.native-aar.import'
apply plugin: 'io.sentry.android.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'com.dicedmelon.gradle.jacoco-android'
//apply plugin: 'fullstory'

//fullstory {
//    org 'QNEN8'
//    enabledVariants 'all'
//    logLevel 'off'
//}

task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '7.0'
}

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.example.vu.android"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 45
        versionName "2.10.6"

        externalNativeBuild {
            cmake {
                arguments.add(0, "-DANDROID_STL=c++_static")
            }
        }

        ndk {
            abiFilters("x86", "armeabi-v7a", "x86_64", "arm64-v8a")
        }
    }
    externalNativeBuild {
        cmake {
            setPath("CMakeLists.txt")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.debug // to be able to run release mode
            buildConfigField("String", "SE", "\"tda\"")
            buildConfigField("boolean", "SLOW_PROFILING", "true")
        }
        debug {
            buildConfigField("String", "SE", "\"tda\"")
            buildConfigField("boolean", "SLOW_PROFILING", "true")
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildFeatures {
        dataBinding true
    }

    lintOptions {
        abortOnError false
    }
    ndkVersion '21.3.6528147'

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation group: 'androidx.constraintlayout', name: 'constraintlayout', version: '1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    implementation 'com.android.support:support-core-utils:28.0.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'junit:junit:4.13.2'
    implementation 'com.google.code.gson:gson:2.10.1'
    def fragment_version = "1.5.6"
    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"

    // Warning: upgrading the room version beyond 2.0.0 may
    // cause errors running automated Saucelabs tests that generate data.
    // If you upgrade the room version, ensure you run associated automated
    // tests locally and that they pass.
    def room_version = "2.0.0"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test:runner:1.4.0'

    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoAndroidUnitTestReport {
    html.enabled(true)
    xml.enabled(true)
    destination "${buildDir}/reports/jacoco"
    excludes += [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true // is this necessary
    jacoco.excludes = ['jdk.internal.*'] // is this necessary
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task verifyExecutionData {
    doLast {
        def debugExecFile = file("${buildDir}/jacoco/testDebugUnitTest.exec")
        def releaseExecFile = file("${buildDir}/jacoco/testReleaseUnitTest.exec")

        if (debugExecFile.exists()) {
            println "Debug exec file found: ${debugExecFile.absolutePath}"
        } else {
            println "Debug exec file not found!"
        }

        if (releaseExecFile.exists()) {
            println "Release exec file found: ${releaseExecFile.absolutePath}"
        } else {
            println "Release exec file not found!"
        }
    }
}

sentry {
    autoUpload = true
    uploadNativeSymbols = false
    includeNativeSources = false
    debug = true
    includeSourceContext = true
    additionalSourceDirsForSourceContext = ["src/main/java"]
    tracingInstrumentation {
        enabled = true
        logcat {
            enabled = true
            minLevel = LogcatLevel.VERBOSE
        }
    }
}
